; query-00058.smtml
(set-info :status unknown)
(set-logic ALL)
(declare-fun symbol_5 () (_ BitVec 32))
(declare-fun symbol_8 () (_ BitVec 32))
(declare-fun symbol_6 () (_ BitVec 32))
(declare-fun symbol_4 () (_ BitVec 32))
(declare-fun symbol_7 () (_ BitVec 32))
(declare-fun symbol_1 () (_ BitVec 32))
(declare-fun symbol_3 () (_ BitVec 32))
(declare-fun symbol_2 () (_ BitVec 32))
(declare-fun symbol_0 () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 7 0) symbol_5)))
 (let ((?x18 ((_ zero_extend 24) ?x17)))
 (let ((?x19 (bvshl ?x18 (_ bv24 32))))
 (let ((?x20 (bvashr ?x19 (_ bv24 32))))
 (let ((?x11 ((_ extract 7 0) symbol_8)))
 (let ((?x12 ((_ zero_extend 24) ?x11)))
 (let ((?x14 (bvshl ?x12 (_ bv24 32))))
 (let ((?x15 (bvashr ?x14 (_ bv24 32))))
 (and (distinct ?x15 ?x20) true))))))))))
(assert
 (let ((?x23 ((_ extract 7 0) symbol_6)))
 (let ((?x24 ((_ zero_extend 24) ?x23)))
 (let ((?x25 (bvshl ?x24 (_ bv24 32))))
 (let ((?x26 (bvashr ?x25 (_ bv24 32))))
 (let ((?x11 ((_ extract 7 0) symbol_8)))
 (let ((?x12 ((_ zero_extend 24) ?x11)))
 (let ((?x14 (bvshl ?x12 (_ bv24 32))))
 (let ((?x15 (bvashr ?x14 (_ bv24 32))))
 (and (distinct ?x15 ?x26) true))))))))))
(assert
 (let ((?x29 ((_ extract 7 0) symbol_4)))
 (let ((?x30 ((_ zero_extend 24) ?x29)))
 (let ((?x31 (bvshl ?x30 (_ bv24 32))))
 (let ((?x32 (bvashr ?x31 (_ bv24 32))))
 (let ((?x11 ((_ extract 7 0) symbol_8)))
 (let ((?x12 ((_ zero_extend 24) ?x11)))
 (let ((?x14 (bvshl ?x12 (_ bv24 32))))
 (let ((?x15 (bvashr ?x14 (_ bv24 32))))
 (and (distinct ?x15 ?x32) true))))))))))
(assert
 (let ((?x11 ((_ extract 7 0) symbol_8)))
 (let ((?x12 ((_ zero_extend 24) ?x11)))
 (let ((?x14 (bvshl ?x12 (_ bv24 32))))
 (let ((?x15 (bvashr ?x14 (_ bv24 32))))
 (let (($x35 (= ?x15 (_ bv0 32))))
 (not $x35)))))))
(assert
 (let ((?x43 ((_ extract 7 0) symbol_7)))
 (let ((?x44 ((_ zero_extend 24) ?x43)))
 (let ((?x45 (bvshl ?x44 (_ bv24 32))))
 (let ((?x46 (bvashr ?x45 (_ bv24 32))))
 (let ((?x38 ((_ extract 7 0) symbol_1)))
 (let ((?x39 ((_ zero_extend 24) ?x38)))
 (let ((?x40 (bvshl ?x39 (_ bv24 32))))
 (let ((?x41 (bvashr ?x40 (_ bv24 32))))
 (and (distinct ?x41 ?x46) true))))))))))
(assert
 (let ((?x38 ((_ extract 7 0) symbol_1)))
 (let ((?x39 ((_ zero_extend 24) ?x38)))
 (let ((?x40 (bvshl ?x39 (_ bv24 32))))
 (let ((?x41 (bvashr ?x40 (_ bv24 32))))
 (let (($x48 (= ?x41 (_ bv0 32))))
 (not $x48)))))))
(assert
 (let ((?x43 ((_ extract 7 0) symbol_7)))
 (let ((?x44 ((_ zero_extend 24) ?x43)))
 (let ((?x45 (bvshl ?x44 (_ bv24 32))))
 (let ((?x46 (bvashr ?x45 (_ bv24 32))))
 (let ((?x51 ((_ extract 7 0) symbol_3)))
 (let ((?x52 ((_ zero_extend 24) ?x51)))
 (let ((?x53 (bvshl ?x52 (_ bv24 32))))
 (let ((?x54 (bvashr ?x53 (_ bv24 32))))
 (and (distinct ?x54 ?x46) true))))))))))
(assert
 (let ((?x43 ((_ extract 7 0) symbol_7)))
 (let ((?x44 ((_ zero_extend 24) ?x43)))
 (let ((?x45 (bvshl ?x44 (_ bv24 32))))
 (let ((?x46 (bvashr ?x45 (_ bv24 32))))
 (let ((?x57 ((_ extract 7 0) symbol_2)))
 (let ((?x58 ((_ zero_extend 24) ?x57)))
 (let ((?x59 (bvshl ?x58 (_ bv24 32))))
 (let ((?x60 (bvashr ?x59 (_ bv24 32))))
 (and (distinct ?x60 ?x46) true))))))))))
(assert
 (let ((?x43 ((_ extract 7 0) symbol_7)))
 (let ((?x44 ((_ zero_extend 24) ?x43)))
 (let ((?x45 (bvshl ?x44 (_ bv24 32))))
 (let ((?x46 (bvashr ?x45 (_ bv24 32))))
 (let ((?x63 ((_ extract 7 0) symbol_0)))
 (let ((?x64 ((_ zero_extend 24) ?x63)))
 (let ((?x65 (bvshl ?x64 (_ bv24 32))))
 (let ((?x66 (bvashr ?x65 (_ bv24 32))))
 (and (distinct ?x66 ?x46) true))))))))))
(assert
 (let ((?x38 ((_ extract 7 0) symbol_1)))
 (let ((?x39 ((_ zero_extend 24) ?x38)))
 (let ((?x40 (bvshl ?x39 (_ bv24 32))))
 (let ((?x41 (bvashr ?x40 (_ bv24 32))))
 (let ((?x51 ((_ extract 7 0) symbol_3)))
 (let ((?x52 ((_ zero_extend 24) ?x51)))
 (let ((?x53 (bvshl ?x52 (_ bv24 32))))
 (let ((?x54 (bvashr ?x53 (_ bv24 32))))
 (and (distinct ?x54 ?x41) true))))))))))
(assert
 (let ((?x51 ((_ extract 7 0) symbol_3)))
 (let ((?x52 ((_ zero_extend 24) ?x51)))
 (let ((?x53 (bvshl ?x52 (_ bv24 32))))
 (let ((?x54 (bvashr ?x53 (_ bv24 32))))
 (let (($x69 (= ?x54 (_ bv0 32))))
 (not $x69)))))))
(assert
 (let ((?x51 ((_ extract 7 0) symbol_3)))
 (let ((?x52 ((_ zero_extend 24) ?x51)))
 (let ((?x53 (bvshl ?x52 (_ bv24 32))))
 (let ((?x54 (bvashr ?x53 (_ bv24 32))))
 (let ((?x57 ((_ extract 7 0) symbol_2)))
 (let ((?x58 ((_ zero_extend 24) ?x57)))
 (let ((?x59 (bvshl ?x58 (_ bv24 32))))
 (let ((?x60 (bvashr ?x59 (_ bv24 32))))
 (and (distinct ?x60 ?x54) true))))))))))
(assert
 (let ((?x63 ((_ extract 7 0) symbol_0)))
 (let ((?x64 ((_ zero_extend 24) ?x63)))
 (let ((?x65 (bvshl ?x64 (_ bv24 32))))
 (let ((?x66 (bvashr ?x65 (_ bv24 32))))
 (let ((?x57 ((_ extract 7 0) symbol_2)))
 (let ((?x58 ((_ zero_extend 24) ?x57)))
 (let ((?x59 (bvshl ?x58 (_ bv24 32))))
 (let ((?x60 (bvashr ?x59 (_ bv24 32))))
 (and (distinct ?x60 ?x66) true))))))))))
(assert
 (let ((?x38 ((_ extract 7 0) symbol_1)))
 (let ((?x39 ((_ zero_extend 24) ?x38)))
 (let ((?x40 (bvshl ?x39 (_ bv24 32))))
 (let ((?x41 (bvashr ?x40 (_ bv24 32))))
 (let ((?x57 ((_ extract 7 0) symbol_2)))
 (let ((?x58 ((_ zero_extend 24) ?x57)))
 (let ((?x59 (bvshl ?x58 (_ bv24 32))))
 (let ((?x60 (bvashr ?x59 (_ bv24 32))))
 (and (distinct ?x60 ?x41) true))))))))))
(assert
 (let ((?x57 ((_ extract 7 0) symbol_2)))
 (let ((?x58 ((_ zero_extend 24) ?x57)))
 (let ((?x59 (bvshl ?x58 (_ bv24 32))))
 (let ((?x60 (bvashr ?x59 (_ bv24 32))))
 (let (($x74 (= ?x60 (_ bv0 32))))
 (not $x74)))))))
(assert
 (let ((?x38 ((_ extract 7 0) symbol_1)))
 (let ((?x39 ((_ zero_extend 24) ?x38)))
 (let ((?x40 (bvshl ?x39 (_ bv24 32))))
 (let ((?x41 (bvashr ?x40 (_ bv24 32))))
 (let ((?x63 ((_ extract 7 0) symbol_0)))
 (let ((?x64 ((_ zero_extend 24) ?x63)))
 (let ((?x65 (bvshl ?x64 (_ bv24 32))))
 (let ((?x66 (bvashr ?x65 (_ bv24 32))))
 (and (distinct ?x66 ?x41) true))))))))))
(assert
 (let ((?x63 ((_ extract 7 0) symbol_0)))
 (let ((?x64 ((_ zero_extend 24) ?x63)))
 (let ((?x65 (bvshl ?x64 (_ bv24 32))))
 (let ((?x66 (bvashr ?x65 (_ bv24 32))))
 (let (($x77 (= ?x66 (_ bv0 32))))
 (not $x77)))))))
(check-sat)
