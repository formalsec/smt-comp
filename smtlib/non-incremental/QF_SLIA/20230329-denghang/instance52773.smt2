(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Denghang Hu
Generated on: 2023-04-14
Application: Evaluate string solvers
Target solver: Ostrich, Z3str3, CVC5
Description: The instance consists of:
(1) a regular membership predicate from the real world
(2) a regular membership predicate to sanitize danger letters in javascript such as <,>,&,",'
(3) a lower bound for string length
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
        ;test regex (\d{1,3}[\.,\s]{0,2})*\d{3}[\.,\s]{0,2}\d{0,2}[\s]{0,2}(zl|z|zlotych|zotych|pln|PLN)?
(declare-const X String)
(assert (str.in_re X (re.++ (re.* (re.++ ((_ re.loop 1 3) (re.range "0" "9")) ((_ re.loop 0 2) (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ ((_ re.loop 0 2) (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))) (re.++ ((_ re.loop 0 2) (re.range "0" "9")) (re.++ ((_ re.loop 0 2) (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "z") (str.to_re "l")) (str.to_re "z")) (re.++ (str.to_re "z") (re.++ (str.to_re "l") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (re.++ (str.to_re "y") (re.++ (str.to_re "c") (str.to_re "h")))))))) (re.++ (str.to_re "z") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (re.++ (str.to_re "y") (re.++ (str.to_re "c") (str.to_re "h"))))))) (re.++ (str.to_re "p") (re.++ (str.to_re "l") (str.to_re "n")))) (re.++ (str.to_re "P") (re.++ (str.to_re "L") (str.to_re "N"))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 20 (str.len X)))
(check-sat)
(exit)
