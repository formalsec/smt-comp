(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Wei-Cheng Wu
Generated on: 2019-07-28
Generator: Py-Conbyte
Application: Concolic execution of Python code
Target solver: CVC4, Z3, Z3str3, Z3-Trau
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun num1 () String)
(declare-fun num2 () String)


(assert (not ( >= ( + ( - (- 1) 1  ) ( str.len "0"  )  ) 0  )))

(assert (not ( >= ( + ( - (- 1) 1  ) ( ite ( < ( str.len "0"  ) ( str.len "0"  )  ) ( str.len "0"  ) ( str.len "0"  )  )  ) 0  )))

(assert (not ( >= ( + ( + ( ite ( str.prefixof "-" ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) ( - ( str.to_int ( str.substr ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  ) 1 ( - ( str.len ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) 1  )  )  )  ) ( str.to_int ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  )  ) ( ite ( str.prefixof "-" ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) ( - ( str.to_int ( str.substr ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  ) 1 ( - ( str.len ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) 1  )  )  )  ) ( str.to_int ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  )  )  ) 0  ) 10  )))

(assert ( ite ( str.prefixof "-" ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) ( and ( ite ( = (- 1) ( str.to_int ( str.substr ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  ) 1 ( - ( str.len ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) 1  )  )  )  ) false true  ) ( > ( str.len ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) 1  )  ) ( ite ( = (- 1) ( str.to_int ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  )  ) false true  )  ))

(assert ( ite ( str.prefixof "-" ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) ( and ( ite ( = (- 1) ( str.to_int ( str.substr ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  ) 1 ( - ( str.len ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) 1  )  )  )  ) false true  ) ( > ( str.len ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  ) 1  )  ) ( ite ( = (- 1) ( str.to_int ( str.at "0" ( + ( str.len "0"  ) (- 1)  )  )  )  ) false true  )  ))

(assert ( >= ( + (- 1) ( ite ( < ( str.len "0"  ) ( str.len "0"  )  ) ( str.len "0"  ) ( str.len "0"  )  )  ) 0  ))

(assert ( = ( str.len num2  ) 0  ))

(assert ( <= ( ite ( str.prefixof "-" num1  ) ( - ( str.to_int ( str.substr num1 1 ( - ( str.len num1  ) 1  )  )  )  ) ( str.to_int num1  )  ) 0  ))

(assert ( ite ( str.prefixof "-" num1  ) ( and ( ite ( = (- 1) ( str.to_int ( str.substr num1 1 ( - ( str.len num1  ) 1  )  )  )  ) false true  ) ( > ( str.len num1  ) 1  )  ) ( ite ( = (- 1) ( str.to_int num1  )  ) false true  )  ))

(assert (not ( = ( str.len num1  ) 0  )))
(assert ( >= ( + ( - (- 1) 1  ) ( str.len "0"  )  ) 0  ))


(check-sat)

(exit)
