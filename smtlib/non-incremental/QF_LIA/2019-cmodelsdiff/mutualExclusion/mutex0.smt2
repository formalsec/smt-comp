(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Da Shen, Yuliya Lierler
Generated on: 2019-04-29
Generator: CMODELS-DIFF
Application: SMT-based Answer Set Solver CMODELS-DIFF [1]

[1] Da Shen and Yuliya Lierler.
    "SMT-based Answer Set Solver CMODELS-DIFF (System Description)"
    34th International Conference on Logic Programming (2018)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; --- END HEADER ---

; --- Including necessary SMT functions ---

(define-fun max ((x Int) (y Int)) Int
  (ite (< x y) y x))

(define-fun min ((x Int) (y Int)) Int
  (ite (< x y) x y))

; --- END INCLUDES ---

(declare-fun |subaut0(1,enter1,3)| () Bool)
(declare-fun |state(5)| () Bool)
(declare-fun |equivalent_dom(enter1,3,3)| () Bool)
(declare-fun |trans(0,req1,1)| () Bool)
(declare-fun |action(enter2)| () Bool)
(declare-fun |equivalent(4,1,1)| () Bool)
(declare-fun |equivalent_dom(req2,4,4)| () Bool)
(declare-fun |equivalent_dom(exit2,11,11)| () Bool)
(declare-fun |outgoing(1,req2)| () Bool)
(declare-fun |equivalent(3,7,7)| () Bool)
(declare-fun |outgoing(5,exit2)| () Bool)
(declare-fun |indep(req2,exit1)| () Bool)
(declare-fun |trans(0,req2,2)| () Bool)
(declare-fun |state(12)| () Bool)
(declare-fun |equivalent(4,6,6)| () Bool)
(declare-fun |309| () Bool)
(declare-fun |equivalent_dom(enter2,6,6)| () Bool)
(declare-fun |equivalent_dom(enter1,6,6)| () Bool)
(declare-fun |subaut0(1,req2,4)| () Bool)
(declare-fun |equivalent(4,7,7)| () Bool)
(declare-fun |live(9)| () Bool)
(declare-fun |dom(enter1,4)| () Bool)
(declare-fun |subaut_action(req2)| () Bool)
(declare-fun |live(0)| () Bool)
(declare-fun |equivalent(4,8,8)| () Bool)
(declare-fun |equivalent_dom(exit2,13,13)| () Bool)
(declare-fun |reach(10)| () Bool)
(declare-fun |equivalent_dom(req2,12,12)| () Bool)
(declare-fun |cspvar(lr124,1,6)| () Bool)
(declare-fun |dom(exit2,4)| () Bool)
(declare-fun |equivalent(4,3,3)| () Bool)
(declare-fun |equivalent_dom(req1,1,1)| () Bool)
(declare-fun |subaut(13,enter2,5)| () Bool)
(declare-fun |reach(5)| () Bool)
(declare-fun |equivalent_dom(req2,8,8)| () Bool)
(declare-fun |subaut0(11,enter2,9)| () Bool)
(declare-fun |subaut(10,enter1,8)| () Bool)
(declare-fun |outgoing(7,exit2)| () Bool)
(declare-fun |subaut(13,req1,11)| () Bool)
(declare-fun |equivalent_dom(req2,0,0)| () Bool)
(declare-fun |335| () Bool)
(declare-fun |337| () Bool)
(declare-fun |336| () Bool)
(declare-fun |331| () Bool)
(declare-fun |333| () Bool)
(declare-fun |332| () Bool)
(declare-fun |dom(exit1,3)| () Bool)
(declare-fun |outgoing(13,enter2)| () Bool)
(declare-fun |subaut(12,req2,10)| () Bool)
(declare-fun |indep(req2,req1)| () Bool)
(declare-fun |equivalent_dom(enter2,10,10)| () Bool)
(declare-fun |outgoing(6,exit1)| () Bool)
(declare-fun |trans(13,req1,11)| () Bool)
(declare-fun |subaut(12,enter1,3)| () Bool)
(declare-fun |equivalent_dom(enter1,2,2)| () Bool)
(declare-fun |equivalent(1,6,6)| () Bool)
(declare-fun |outgoing(12,req2)| () Bool)
(declare-fun |equivalent_dom(req1,6,6)| () Bool)
(declare-fun |subaut0(12,enter1,3)| () Bool)
(declare-fun |subaut0(5,exit2,0)| () Bool)
(declare-fun |trans(6,exit1,2)| () Bool)
(declare-fun |equivalent(3,5,5)| () Bool)
(declare-fun |subaut0(13,enter2,5)| () Bool)
(declare-fun |process(3)| () Bool)
(declare-fun |subaut(1,enter1,3)| () Bool)
(declare-fun |cspdomain(fd)| () Bool)
(declare-fun |equivalent(1,8,8)| () Bool)
(declare-fun |equivalent_dom(exit2,2,2)| () Bool)
(declare-fun |subaut_action(exit2)| () Bool)
(declare-fun |outgoing(4,enter2)| () Bool)
(declare-fun |required(ezcsp__geq(ezcsp__pl(lr120,-1),lr124))| () Bool)
(declare-fun |equivalent(3,12,12)| () Bool)
(declare-fun |subaut0(7,exit2,1)| () Bool)
(declare-fun |subaut0(12,req2,10)| () Bool)
(declare-fun |equivalent(3,2,2)| () Bool)
(declare-fun |reach(0)| () Bool)
(declare-fun |trans(8,exit1,13)| () Bool)
(declare-fun |equivalent_dom(enter1,13,13)| () Bool)
(declare-fun |trans(12,req2,10)| () Bool)
(declare-fun |action(exit1)| () Bool)
(declare-fun |trans(3,req2,6)| () Bool)
(declare-fun |dom(enter2,2)| () Bool)
(declare-fun |live(5)| () Bool)
(declare-fun |equivalent_dom(exit1,13,13)| () Bool)
(declare-fun |initialstate(0)| () Bool)
(declare-fun |subaut0(9,exit2,12)| () Bool)
(declare-fun |outgoing(10,enter1)| () Bool)
(declare-fun |equivalent(4,12,12)| () Bool)
(declare-fun |live(10)| () Bool)
(declare-fun |action(req2)| () Bool)
(declare-fun |live(13)| () Bool)
(declare-fun |equivalent_dom(enter1,5,5)| () Bool)
(declare-fun |equivalent_dom(req1,2,2)| () Bool)
(declare-fun |equivalent_dom(exit2,10,10)| () Bool)
(declare-fun |equivalent(2,6,6)| () Bool)
(declare-fun |equivalent_dom(req1,11,11)| () Bool)
(declare-fun |equivalent(2,5,5)| () Bool)
(declare-fun |state(4)| () Bool)
(declare-fun |equivalent_dom(enter1,1,1)| () Bool)
(declare-fun |outgoing(0,req1)| () Bool)
(declare-fun |equivalent_dom(req2,9,9)| () Bool)
(declare-fun |cspvar(lr123,1,6)| () Bool)
(declare-fun |indep(enter2,enter1)| () Bool)
(declare-fun |equivalent_dom(enter1,10,10)| () Bool)
(declare-fun |trans(12,enter1,3)| () Bool)
(declare-fun |subaut(0,req1,1)| () Bool)
(declare-fun |trans(11,enter2,9)| () Bool)
(declare-fun |equivalent(2,10,10)| () Bool)
(declare-fun |equivalent_dom(req1,10,10)| () Bool)
(declare-fun |subaut(8,exit1,13)| () Bool)
(declare-fun |trans(5,req1,7)| () Bool)
(declare-fun |state(13)| () Bool)
(declare-fun |outgoing(8,exit1)| () Bool)
(declare-fun |equivalent_dom(exit2,7,7)| () Bool)
(declare-fun |live(6)| () Bool)
(declare-fun |live(1)| () Bool)
(declare-fun |subaut_action(req1)| () Bool)
(declare-fun |required(ezcsp__geq(ezcsp__pl(lr124,-1),lr122))| () Bool)
(declare-fun |cspvar(lr120,1,6)| () Bool)
(declare-fun |equivalent(2,2,2)| () Bool)
(declare-fun |equivalent_dom(exit1,7,7)| () Bool)
(declare-fun |subaut_action(exit1)| () Bool)
(declare-fun |reach(11)| () Bool)
(declare-fun |subaut(7,exit2,1)| () Bool)
(declare-fun |subaut(11,enter2,9)| () Bool)
(declare-fun |equivalent_dom(exit1,0,0)| () Bool)
(declare-fun |equivalent(1,9,9)| () Bool)
(declare-fun |equivalent(2,1,1)| () Bool)
(declare-fun |equivalent(3,0,0)| () Bool)
(declare-fun |action(exit2)| () Bool)
(declare-fun |equivalent(4,5,5)| () Bool)
(declare-fun |reach(4)| () Bool)
(declare-fun |required(ezcsp__geq(ezcsp__pl(lr123,-1),lr120))| () Bool)
(declare-fun |equivalent(1,12,12)| () Bool)
(declare-fun |subaut(2,req1,4)| () Bool)
(declare-fun |equivalent(3,1,1)| () Bool)
(declare-fun |equivalent(3,6,6)| () Bool)
(declare-fun |dom(exit2,2)| () Bool)
(declare-fun |equivalent_dom(req2,10,10)| () Bool)
(declare-fun |equivalent(1,0,0)| () Bool)
(declare-fun |outgoing(13,req1)| () Bool)
(declare-fun |equivalent(3,8,8)| () Bool)
(declare-fun |outgoing(12,enter1)| () Bool)
(declare-fun |outgoing(4,enter1)| () Bool)
(declare-fun |equivalent(1,3,3)| () Bool)
(declare-fun |trans(5,exit2,0)| () Bool)
(declare-fun |state(9)| () Bool)
(declare-fun |equivalent(2,4,4)| () Bool)
(declare-fun |equivalent_dom(req1,0,0)| () Bool)
(declare-fun |state(7)| () Bool)
(declare-fun |state(0)| () Bool)
(declare-fun |outgoing(0,req2)| () Bool)
(declare-fun |equivalent_dom(exit2,8,8)| () Bool)
(declare-fun |323| () Bool)
(declare-fun |320| () Bool)
(declare-fun |321| () Bool)
(declare-fun |327| () Bool)
(declare-fun |324| () Bool)
(declare-fun |325| () Bool)
(declare-fun |equivalent_dom(exit1,3,3)| () Bool)
(declare-fun |328| () Bool)
(declare-fun |329| () Bool)
(declare-fun |subaut(2,enter2,5)| () Bool)
(declare-fun |process(2)| () Bool)
(declare-fun |cspvar(lr125,1,6)| () Bool)
(declare-fun |equivalent_dom(req1,5,5)| () Bool)
(declare-fun |subaut(9,exit2,12)| () Bool)
(declare-fun |equivalent_dom(exit2,5,5)| () Bool)
(declare-fun |subaut0(2,enter2,5)| () Bool)
(declare-fun |equivalent_dom(exit1,12,12)| () Bool)
(declare-fun |equivalent_dom(enter2,4,4)| () Bool)
(declare-fun |equivalent(3,11,11)| () Bool)
(declare-fun |reach(3)| () Bool)
(declare-fun |equivalent_dom(exit1,6,6)| () Bool)
(declare-fun |dom(enter2,3)| () Bool)
(declare-fun |live(2)| () Bool)
(declare-fun |equivalent(4,11,11)| () Bool)
(declare-fun |equivalent(2,0,0)| () Bool)
(declare-fun |subaut0(3,exit1,0)| () Bool)
(declare-fun |126| () Bool)
(declare-fun |equivalent_dom(enter2,12,12)| () Bool)
(declare-fun |equivalent(1,5,5)| () Bool)
(declare-fun |equivalent(4,0,0)| () Bool)
(declare-fun |equivalent_dom(exit1,4,4)| () Bool)
(declare-fun |equivalent_dom(enter1,12,12)| () Bool)
(declare-fun |equivalent(3,9,9)| () Bool)
(declare-fun |state(1)| () Bool)
(declare-fun |equivalent(4,10,10)| () Bool)
(declare-fun |318| () Bool)
(declare-fun |313| () Bool)
(declare-fun |312| () Bool)
(declare-fun |311| () Bool)
(declare-fun |310| () Bool)
(declare-fun |317| () Bool)
(declare-fun |315| () Bool)
(declare-fun |314| () Bool)
(declare-fun |dom(exit1,1)| () Bool)
(declare-fun |equivalent_dom(req2,13,13)| () Bool)
(declare-fun |equivalent_dom(req1,9,9)| () Bool)
(declare-fun |state(3)| () Bool)
(declare-fun |equivalent_dom(enter2,0,0)| () Bool)
(declare-fun |cspvar(lr122,1,6)| () Bool)
(declare-fun |required(ezcsp__geq(ezcsp__pl(lr122,-1),lr119))| () Bool)
(declare-fun |trans(3,exit1,0)| () Bool)
(declare-fun |equivalent_dom(exit2,9,9)| () Bool)
(declare-fun |trans(7,exit2,1)| () Bool)
(declare-fun |equivalent_dom(req1,12,12)| () Bool)
(declare-fun |equivalent_dom(exit1,2,2)| () Bool)
(declare-fun |state(10)| () Bool)
(declare-fun |required(ezcsp__geq(ezcsp__pl(lr119,-1),lr125))| () Bool)
(declare-fun |equivalent(3,13,13)| () Bool)
(declare-fun |subaut(3,exit1,0)| () Bool)
(declare-fun |subaut0(4,enter2,9)| () Bool)
(declare-fun |equivalent_dom(req2,11,11)| () Bool)
(declare-fun |trans(4,enter1,8)| () Bool)
(declare-fun |live(7)| () Bool)
(declare-fun |equivalent_dom(req2,2,2)| () Bool)
(declare-fun |equivalent_dom(enter1,11,11)| () Bool)
(declare-fun |trans(13,enter2,5)| () Bool)
(declare-fun |equivalent_dom(enter2,3,3)| () Bool)
(declare-fun |equivalent(2,7,7)| () Bool)
(declare-fun |dom(req2,4)| () Bool)
(declare-fun |equivalent_dom(req1,3,3)| () Bool)
(declare-fun |reach(12)| () Bool)
(declare-fun |equivalent_dom(exit2,0,0)| () Bool)
(declare-fun |equivalent_dom(req2,5,5)| () Bool)
(declare-fun |equivalent(2,3,3)| () Bool)
(declare-fun |equivalent(4,13,13)| () Bool)
(declare-fun |trans(10,enter1,8)| () Bool)
(declare-fun |reach(7)| () Bool)
(declare-fun |subaut0(10,enter1,8)| () Bool)
(declare-fun |indep(exit2,req1)| () Bool)
(declare-fun |equivalent(4,2,2)| () Bool)
(declare-fun |action(req1)| () Bool)
(declare-fun |reach(9)| () Bool)
(declare-fun |equivalent_dom(enter2,8,8)| () Bool)
(declare-fun |equivalent(1,7,7)| () Bool)
(declare-fun |subaut_action(enter2)| () Bool)
(declare-fun |trans(1,enter1,3)| () Bool)
(declare-fun |equivalent_dom(req1,13,13)| () Bool)
(declare-fun |equivalent_dom(req1,8,8)| () Bool)
(declare-fun |trans(1,req2,4)| () Bool)
(declare-fun |subaut0(4,enter1,8)| () Bool)
(declare-fun |state(8)| () Bool)
(declare-fun |equivalent(2,13,13)| () Bool)
(declare-fun |equivalent_dom(exit2,3,3)| () Bool)
(declare-fun |state(6)| () Bool)
(declare-fun |equivalent(2,12,12)| () Bool)
(declare-fun |equivalent_dom(enter2,1,1)| () Bool)
(declare-fun |equivalent(1,2,2)| () Bool)
(declare-fun |action(enter1)| () Bool)
(declare-fun |equivalent_dom(req2,6,6)| () Bool)
(declare-fun |equivalent_dom(exit1,1,1)| () Bool)
(declare-fun |equivalent_dom(exit2,12,12)| () Bool)
(declare-fun |process(1)| () Bool)
(declare-fun |equivalent_dom(enter1,9,9)| () Bool)
(declare-fun |subaut(6,exit1,2)| () Bool)
(declare-fun |outgoing(1,enter1)| () Bool)
(declare-fun |subaut0(5,req1,7)| () Bool)
(declare-fun |equivalent_dom(exit1,11,11)| () Bool)
(declare-fun |equivalent_dom(req2,3,3)| () Bool)
(declare-fun |equivalent(1,10,10)| () Bool)
(declare-fun |live(8)| () Bool)
(declare-fun |subaut0(2,req1,4)| () Bool)
(declare-fun |subaut(1,req2,4)| () Bool)
(declare-fun |equivalent(2,8,8)| () Bool)
(declare-fun |live(3)| () Bool)
(declare-fun |equivalent_dom(enter1,8,8)| () Bool)
(declare-fun |outgoing(3,req2)| () Bool)
(declare-fun |indep(exit1,req2)| () Bool)
(declare-fun |equivalent_dom(req1,4,4)| () Bool)
(declare-fun |equivalent_dom(exit1,8,8)| () Bool)
(declare-fun |indep(exit2,exit1)| () Bool)
(declare-fun |live(12)| () Bool)
(declare-fun |reach(2)| () Bool)
(declare-fun |equivalent_dom(exit2,4,4)| () Bool)
(declare-fun |indep(exit1,exit2)| () Bool)
(declare-fun |equivalent_dom(req2,1,1)| () Bool)
(declare-fun |subaut0(13,req1,11)| () Bool)
(declare-fun |equivalent_dom(enter2,7,7)| () Bool)
(declare-fun |cspvar(lr119,1,6)| () Bool)
(declare-fun |equivalent(1,4,4)| () Bool)
(declare-fun |equivalent(4,9,9)| () Bool)
(declare-fun |trans(4,enter2,9)| () Bool)
(declare-fun |equivalent_dom(exit1,5,5)| () Bool)
(declare-fun |equivalent(3,4,4)| () Bool)
(declare-fun |outgoing(3,exit1)| () Bool)
(declare-fun |state(2)| () Bool)
(declare-fun |subaut_action(enter1)| () Bool)
(declare-fun |subaut(5,exit2,0)| () Bool)
(declare-fun |outgoing(9,exit2)| () Bool)
(declare-fun |equivalent_dom(exit2,1,1)| () Bool)
(declare-fun |equivalent_dom(enter2,13,13)| () Bool)
(declare-fun |outgoing(5,req1)| () Bool)
(declare-fun |equivalent_dom(enter2,2,2)| () Bool)
(declare-fun |outgoing(2,enter2)| () Bool)
(declare-fun |equivalent_dom(exit1,10,10)| () Bool)
(declare-fun |indep(req1,exit2)| () Bool)
(declare-fun |equivalent(1,13,13)| () Bool)
(declare-fun |equivalent_dom(req2,7,7)| () Bool)
(declare-fun |dom(req1,3)| () Bool)
(declare-fun |equivalent_dom(req1,7,7)| () Bool)
(declare-fun |trans(9,exit2,12)| () Bool)
(declare-fun |subaut0(8,exit1,13)| () Bool)
(declare-fun |state(11)| () Bool)
(declare-fun |equivalent_dom(enter2,9,9)| () Bool)
(declare-fun |equivalent(2,11,11)| () Bool)
(declare-fun |equivalent(3,10,10)| () Bool)
(declare-fun |reach(13)| () Bool)
(declare-fun |equivalent_dom(enter1,4,4)| () Bool)
(declare-fun |equivalent(2,9,9)| () Bool)
(declare-fun |live(4)| () Bool)
(declare-fun |equivalent_dom(exit1,9,9)| () Bool)
(declare-fun |process(4)| () Bool)
(declare-fun |subaut(4,enter2,9)| () Bool)
(declare-fun |equivalent_dom(enter2,5,5)| () Bool)
(declare-fun |equivalent_dom(enter1,7,7)| () Bool)
(declare-fun |equivalent(4,4,4)| () Bool)
(declare-fun |equivalent(3,3,3)| () Bool)
(declare-fun |required(ezcsp__geq(ezcsp__pl(lr125,-1),lr123))| () Bool)
(declare-fun |indep(req1,req2)| () Bool)
(declare-fun |subaut(4,enter1,8)| () Bool)
(declare-fun |equivalent(1,1,1)| () Bool)
(declare-fun |reach(1)| () Bool)
(declare-fun |dom(req1,1)| () Bool)
(declare-fun |indep(enter1,enter2)| () Bool)
(declare-fun |dom(enter1,1)| () Bool)
(declare-fun |equivalent_dom(enter2,11,11)| () Bool)
(declare-fun |dom(req2,2)| () Bool)
(declare-fun |reach(6)| () Bool)
(declare-fun |subaut(0,req2,2)| () Bool)
(declare-fun |subaut(3,req2,6)| () Bool)
(declare-fun |reach(8)| () Bool)
(declare-fun |trans(2,enter2,5)| () Bool)
(declare-fun |live(11)| () Bool)
(declare-fun |subaut(5,req1,7)| () Bool)
(declare-fun |equivalent_dom(enter1,0,0)| () Bool)
(declare-fun |subaut0(3,req2,6)| () Bool)
(declare-fun |outgoing(11,enter2)| () Bool)
(declare-fun |subaut0(6,exit1,2)| () Bool)
(declare-fun |trans(2,req1,4)| () Bool)
(declare-fun |equivalent_dom(exit2,6,6)| () Bool)
(declare-fun |equivalent(1,11,11)| () Bool)
(declare-fun |outgoing(2,req1)| () Bool)
(assert (or |subaut(1,enter1,3)| |subaut0(1,enter1,3)|))
(assert (or |subaut0(1,enter1,3)| |subaut(1,enter1,3)|))
(assert (or |subaut(1,req2,4)| |subaut0(1,req2,4)|))
(assert (or |subaut0(1,req2,4)| |subaut(1,req2,4)|))
(assert (or |subaut(2,req1,4)| |subaut0(2,req1,4)|))
(assert (or |subaut0(2,req1,4)| |subaut(2,req1,4)|))
(assert (or |subaut(2,enter2,5)| |subaut0(2,enter2,5)|))
(assert (or |subaut0(2,enter2,5)| |subaut(2,enter2,5)|))
(assert (or |subaut(3,exit1,0)| |subaut0(3,exit1,0)|))
(assert (or |subaut0(3,exit1,0)| |subaut(3,exit1,0)|))
(assert (or |subaut(3,req2,6)| |subaut0(3,req2,6)|))
(assert (or |subaut0(3,req2,6)| |subaut(3,req2,6)|))
(assert (or |subaut(4,enter1,8)| |subaut0(4,enter1,8)|))
(assert (or |subaut0(4,enter1,8)| |subaut(4,enter1,8)|))
(assert (or |subaut(4,enter2,9)| |subaut0(4,enter2,9)|))
(assert (or |subaut0(4,enter2,9)| |subaut(4,enter2,9)|))
(assert (or |subaut(5,req1,7)| |subaut0(5,req1,7)|))
(assert (or |subaut0(5,req1,7)| |subaut(5,req1,7)|))
(assert (or |subaut(5,exit2,0)| |subaut0(5,exit2,0)|))
(assert (or |subaut0(5,exit2,0)| |subaut(5,exit2,0)|))
(assert (or |subaut(6,exit1,2)| |subaut0(6,exit1,2)|))
(assert (or |subaut0(6,exit1,2)| |subaut(6,exit1,2)|))
(assert (or |subaut(7,exit2,1)| |subaut0(7,exit2,1)|))
(assert (or |subaut0(7,exit2,1)| |subaut(7,exit2,1)|))
(assert (or |subaut(8,exit1,13)| |subaut0(8,exit1,13)|))
(assert (or |subaut0(8,exit1,13)| |subaut(8,exit1,13)|))
(assert (or |subaut(9,exit2,12)| |subaut0(9,exit2,12)|))
(assert (or |subaut0(9,exit2,12)| |subaut(9,exit2,12)|))
(assert (or |subaut(10,enter1,8)| |subaut0(10,enter1,8)|))
(assert (or |subaut0(10,enter1,8)| |subaut(10,enter1,8)|))
(assert (or |subaut(11,enter2,9)| |subaut0(11,enter2,9)|))
(assert (or |subaut0(11,enter2,9)| |subaut(11,enter2,9)|))
(assert (or |subaut(12,enter1,3)| |subaut0(12,enter1,3)|))
(assert (or |subaut0(12,enter1,3)| |subaut(12,enter1,3)|))
(assert (or |subaut(12,req2,10)| |subaut0(12,req2,10)|))
(assert (or |subaut0(12,req2,10)| |subaut(12,req2,10)|))
(assert (or |subaut(13,req1,11)| |subaut0(13,req1,11)|))
(assert (or |subaut0(13,req1,11)| |subaut(13,req1,11)|))
(assert (or |subaut(13,enter2,5)| |subaut0(13,enter2,5)|))
(assert (or |subaut0(13,enter2,5)| |subaut(13,enter2,5)|))
(assert (or (not |subaut(1,enter1,3)|) |reach(3)|))
(assert (or (not |310|) |reach(3)|))
(assert (or (not |subaut(1,req2,4)|) |reach(4)|))
(assert (or (not |subaut(2,req1,4)|) |reach(4)|))
(assert (or (not |subaut(2,enter2,5)|) |reach(5)|))
(assert (or (not |311|) |reach(5)|))
(assert (or (not |subaut(3,req2,6)|) (not |reach(3)|) |reach(6)|))
(assert (or (not |312|) |reach(8)|))
(assert (or (not |313|) |reach(8)|))
(assert (or (not |314|) |reach(9)|))
(assert (or (not |315|) |reach(9)|))
(assert (or (not |subaut(5,req1,7)|) (not |reach(5)|) |reach(7)|))
(assert (or (not |subaut(8,exit1,13)|) (not |reach(8)|) |reach(13)|))
(assert (or (not |subaut(9,exit2,12)|) (not |reach(9)|) |reach(12)|))
(assert (or (not |subaut(13,req1,11)|) (not |reach(13)|) |reach(11)|))
(assert (or (not |subaut(12,req2,10)|) (not |reach(12)|) |reach(10)|))
(assert (or (not |subaut(3,exit1,0)|) |reach(3)|))
(assert (or (not |subaut(3,req2,6)|) |reach(3)|))
(assert (or (not |subaut(4,enter1,8)|) |reach(4)|))
(assert (or (not |subaut(4,enter2,9)|) |reach(4)|))
(assert (or (not |subaut(5,req1,7)|) |reach(5)|))
(assert (or (not |subaut(5,exit2,0)|) |reach(5)|))
(assert (or (not |subaut(6,exit1,2)|) |reach(6)|))
(assert (or (not |subaut(7,exit2,1)|) |reach(7)|))
(assert (or (not |subaut(8,exit1,13)|) |reach(8)|))
(assert (or (not |subaut(9,exit2,12)|) |reach(9)|))
(assert (or (not |subaut(10,enter1,8)|) |reach(10)|))
(assert (or (not |subaut(11,enter2,9)|) |reach(11)|))
(assert (or (not |subaut(12,enter1,3)|) |reach(12)|))
(assert (or (not |subaut(12,req2,10)|) |reach(12)|))
(assert (or (not |subaut(13,req1,11)|) |reach(13)|))
(assert (or (not |subaut(13,enter2,5)|) |reach(13)|))
(assert (or (not |subaut(1,enter1,3)|) |reach(3)|))
(assert (or (not |subaut(1,req2,4)|) |reach(4)|))
(assert (or (not |subaut(2,req1,4)|) |reach(4)|))
(assert (or (not |subaut(2,enter2,5)|) |reach(5)|))
(assert (or (not |subaut(3,req2,6)|) |reach(6)|))
(assert (or (not |subaut(4,enter1,8)|) |reach(8)|))
(assert (or (not |subaut(4,enter2,9)|) |reach(9)|))
(assert (or (not |subaut(5,req1,7)|) |reach(7)|))
(assert (or (not |subaut(8,exit1,13)|) |reach(13)|))
(assert (or (not |subaut(9,exit2,12)|) |reach(12)|))
(assert (or (not |subaut(10,enter1,8)|) |reach(8)|))
(assert (or (not |subaut(11,enter2,9)|) |reach(9)|))
(assert (or (not |subaut(12,enter1,3)|) |reach(3)|))
(assert (or (not |subaut(12,req2,10)|) |reach(10)|))
(assert (or (not |subaut(13,req1,11)|) |reach(11)|))
(assert (or (not |subaut(13,enter2,5)|) |reach(5)|))
(assert (or (not |reach(3)|) |live(3)|))
(assert (or (not |reach(4)|) |live(4)|))
(assert (or (not |reach(5)|) |live(5)|))
(assert (or (not |reach(6)|) |live(6)|))
(assert (or (not |reach(7)|) |live(7)|))
(assert (or (not |reach(8)|) |live(8)|))
(assert (or (not |reach(9)|) |live(9)|))
(assert (or (not |reach(10)|) |live(10)|))
(assert (or (not |reach(11)|) |live(11)|))
(assert (or (not |reach(12)|) |live(12)|))
(assert (or (not |reach(13)|) |live(13)|))
(assert (or (not |subaut(1,enter1,3)|) |live(1)|))
(assert (or (not |subaut(1,req2,4)|) |live(1)|))
(assert (or (not |subaut(2,req1,4)|) |live(2)|))
(assert (or (not |subaut(2,enter2,5)|) |live(2)|))
(assert (or (not |subaut(3,exit1,0)|) |live(3)|))
(assert (or (not |subaut(3,req2,6)|) |live(3)|))
(assert (or (not |subaut(4,enter1,8)|) |live(4)|))
(assert (or (not |subaut(4,enter2,9)|) |live(4)|))
(assert (or (not |subaut(5,req1,7)|) |live(5)|))
(assert (or (not |subaut(5,exit2,0)|) |live(5)|))
(assert (or (not |subaut(6,exit1,2)|) |live(6)|))
(assert (or (not |subaut(7,exit2,1)|) |live(7)|))
(assert (or (not |subaut(8,exit1,13)|) |live(8)|))
(assert (or (not |subaut(9,exit2,12)|) |live(9)|))
(assert (or (not |subaut(10,enter1,8)|) |live(10)|))
(assert (or (not |subaut(11,enter2,9)|) |live(11)|))
(assert (or (not |subaut(12,enter1,3)|) |live(12)|))
(assert (or (not |subaut(12,req2,10)|) |live(12)|))
(assert (or (not |subaut(13,req1,11)|) |live(13)|))
(assert (or (not |subaut(13,enter2,5)|) |live(13)|))
(assert (or (not |subaut(1,enter1,3)|) |subaut_action(enter1)|))
(assert (or (not |subaut(4,enter1,8)|) |subaut_action(enter1)|))
(assert (or (not |subaut(10,enter1,8)|) |subaut_action(enter1)|))
(assert (or (not |subaut(12,enter1,3)|) |subaut_action(enter1)|))
(assert (or (not |subaut(2,enter2,5)|) |subaut_action(enter2)|))
(assert (or (not |subaut(4,enter2,9)|) |subaut_action(enter2)|))
(assert (or (not |subaut(11,enter2,9)|) |subaut_action(enter2)|))
(assert (or (not |subaut(13,enter2,5)|) |subaut_action(enter2)|))
(assert (or (not |subaut(3,exit1,0)|) |subaut_action(exit1)|))
(assert (or (not |subaut(6,exit1,2)|) |subaut_action(exit1)|))
(assert (or (not |subaut(8,exit1,13)|) |subaut_action(exit1)|))
(assert (or (not |subaut(5,exit2,0)|) |subaut_action(exit2)|))
(assert (or (not |subaut(7,exit2,1)|) |subaut_action(exit2)|))
(assert (or (not |subaut(9,exit2,12)|) |subaut_action(exit2)|))
(assert (or (not |subaut(1,enter1,3)|) |outgoing(1,enter1)|))
(assert (or (not |subaut(1,req2,4)|) |outgoing(1,req2)|))
(assert (or (not |subaut(2,req1,4)|) |outgoing(2,req1)|))
(assert (or (not |subaut(2,enter2,5)|) |outgoing(2,enter2)|))
(assert (or (not |subaut(3,exit1,0)|) |outgoing(3,exit1)|))
(assert (or (not |subaut(3,req2,6)|) |outgoing(3,req2)|))
(assert (or (not |subaut(4,enter1,8)|) |outgoing(4,enter1)|))
(assert (or (not |subaut(4,enter2,9)|) |outgoing(4,enter2)|))
(assert (or (not |subaut(5,req1,7)|) |outgoing(5,req1)|))
(assert (or (not |subaut(5,exit2,0)|) |outgoing(5,exit2)|))
(assert (or (not |subaut(6,exit1,2)|) |outgoing(6,exit1)|))
(assert (or (not |subaut(7,exit2,1)|) |outgoing(7,exit2)|))
(assert (or (not |subaut(8,exit1,13)|) |outgoing(8,exit1)|))
(assert (or (not |subaut(9,exit2,12)|) |outgoing(9,exit2)|))
(assert (or (not |subaut(10,enter1,8)|) |outgoing(10,enter1)|))
(assert (or (not |subaut(11,enter2,9)|) |outgoing(11,enter2)|))
(assert (or (not |subaut(12,enter1,3)|) |outgoing(12,enter1)|))
(assert (or (not |subaut(12,req2,10)|) |outgoing(12,req2)|))
(assert (or (not |subaut(13,req1,11)|) |outgoing(13,req1)|))
(assert (or (not |subaut(13,enter2,5)|) |outgoing(13,enter2)|))
(assert (or (not |318|) |312|))
(assert (or (not |312|) |318|))
(assert (or (not |321|) |314|))
(assert (or (not |314|) |321|))
(assert (not |325|))
(assert (not |329|))
(assert (not |333|))
(assert (not |337|))
(assert |cspdomain(fd)|)
(assert |cspvar(lr119,1,6)|)
(assert |cspvar(lr120,1,6)|)
(assert |cspvar(lr122,1,6)|)
(assert |cspvar(lr123,1,6)|)
(assert |cspvar(lr124,1,6)|)
(assert |cspvar(lr125,1,6)|)
(assert (or (not |subaut(1,enter1,3)|) (not |subaut0(1,enter1,3)|)))
(assert (or (not |subaut0(1,enter1,3)|) (not |subaut(1,enter1,3)|)))
(assert (or (not |subaut(1,req2,4)|) (not |subaut0(1,req2,4)|)))
(assert (or (not |subaut0(1,req2,4)|) (not |subaut(1,req2,4)|)))
(assert (or (not |subaut(2,req1,4)|) (not |subaut0(2,req1,4)|)))
(assert (or (not |subaut0(2,req1,4)|) (not |subaut(2,req1,4)|)))
(assert (or (not |subaut(2,enter2,5)|) (not |subaut0(2,enter2,5)|)))
(assert (or (not |subaut0(2,enter2,5)|) (not |subaut(2,enter2,5)|)))
(assert (or (not |subaut(3,exit1,0)|) (not |subaut0(3,exit1,0)|)))
(assert (or (not |subaut0(3,exit1,0)|) (not |subaut(3,exit1,0)|)))
(assert (or (not |subaut(3,req2,6)|) (not |subaut0(3,req2,6)|)))
(assert (or (not |subaut0(3,req2,6)|) (not |subaut(3,req2,6)|)))
(assert (or (not |subaut(4,enter1,8)|) (not |subaut0(4,enter1,8)|)))
(assert (or (not |subaut0(4,enter1,8)|) (not |subaut(4,enter1,8)|)))
(assert (or (not |subaut(4,enter2,9)|) (not |subaut0(4,enter2,9)|)))
(assert (or (not |subaut0(4,enter2,9)|) (not |subaut(4,enter2,9)|)))
(assert (or (not |subaut(5,req1,7)|) (not |subaut0(5,req1,7)|)))
(assert (or (not |subaut0(5,req1,7)|) (not |subaut(5,req1,7)|)))
(assert (or (not |subaut(5,exit2,0)|) (not |subaut0(5,exit2,0)|)))
(assert (or (not |subaut0(5,exit2,0)|) (not |subaut(5,exit2,0)|)))
(assert (or (not |subaut(6,exit1,2)|) (not |subaut0(6,exit1,2)|)))
(assert (or (not |subaut0(6,exit1,2)|) (not |subaut(6,exit1,2)|)))
(assert (or (not |subaut(7,exit2,1)|) (not |subaut0(7,exit2,1)|)))
(assert (or (not |subaut0(7,exit2,1)|) (not |subaut(7,exit2,1)|)))
(assert (or (not |subaut(8,exit1,13)|) (not |subaut0(8,exit1,13)|)))
(assert (or (not |subaut0(8,exit1,13)|) (not |subaut(8,exit1,13)|)))
(assert (or (not |subaut(9,exit2,12)|) (not |subaut0(9,exit2,12)|)))
(assert (or (not |subaut0(9,exit2,12)|) (not |subaut(9,exit2,12)|)))
(assert (or (not |subaut(10,enter1,8)|) (not |subaut0(10,enter1,8)|)))
(assert (or (not |subaut0(10,enter1,8)|) (not |subaut(10,enter1,8)|)))
(assert (or (not |subaut(11,enter2,9)|) (not |subaut0(11,enter2,9)|)))
(assert (or (not |subaut0(11,enter2,9)|) (not |subaut(11,enter2,9)|)))
(assert (or (not |subaut(12,enter1,3)|) (not |subaut0(12,enter1,3)|)))
(assert (or (not |subaut0(12,enter1,3)|) (not |subaut(12,enter1,3)|)))
(assert (or (not |subaut(12,req2,10)|) (not |subaut0(12,req2,10)|)))
(assert (or (not |subaut0(12,req2,10)|) (not |subaut(12,req2,10)|)))
(assert (or (not |subaut(13,req1,11)|) (not |subaut0(13,req1,11)|)))
(assert (or (not |subaut0(13,req1,11)|) (not |subaut(13,req1,11)|)))
(assert (or (not |subaut(13,enter2,5)|) (not |subaut0(13,enter2,5)|)))
(assert (or (not |subaut0(13,enter2,5)|) (not |subaut(13,enter2,5)|)))
(assert (or (not |310|) |subaut(12,enter1,3)|))
(assert (or (not |310|) |reach(12)|))
(assert (or (not |subaut(12,enter1,3)|) (not |reach(12)|) |310|))
(assert (or (not |reach(3)|) |subaut(1,enter1,3)| |310|))
(assert (or (not |reach(4)|) |subaut(1,req2,4)| |subaut(2,req1,4)|))
(assert (or (not |311|) |subaut(13,enter2,5)|))
(assert (or (not |311|) |reach(13)|))
(assert (or (not |subaut(13,enter2,5)|) (not |reach(13)|) |311|))
(assert (or (not |reach(5)|) |subaut(2,enter2,5)| |311|))
(assert (or (not |reach(6)|) |subaut(3,req2,6)|))
(assert (or (not |reach(6)|) |reach(3)|))
(assert (or (not |312|) |subaut(4,enter1,8)|))
(assert (or (not |312|) |reach(4)|))
(assert (or (not |subaut(4,enter1,8)|) (not |reach(4)|) |312|))
(assert (or (not |313|) |subaut(10,enter1,8)|))
(assert (or (not |313|) |reach(10)|))
(assert (or (not |subaut(10,enter1,8)|) (not |reach(10)|) |313|))
(assert (or (not |reach(8)|) |317| |318|))
(assert (or (not |314|) |subaut(4,enter2,9)|))
(assert (or (not |314|) |reach(4)|))
(assert (or (not |subaut(4,enter2,9)|) (not |reach(4)|) |314|))
(assert (or (not |315|) |subaut(11,enter2,9)|))
(assert (or (not |315|) |reach(11)|))
(assert (or (not |subaut(11,enter2,9)|) (not |reach(11)|) |315|))
(assert (or (not |reach(9)|) |320| |321|))
(assert (or (not |reach(7)|) |subaut(5,req1,7)|))
(assert (or (not |reach(7)|) |reach(5)|))
(assert (or (not |reach(13)|) |323| |325|))
(assert (or (not |reach(12)|) |327| |329|))
(assert (or (not |reach(11)|) |331| |333|))
(assert (or (not |reach(10)|) |335| |337|))
(assert (or (not |live(1)|) |subaut(1,enter1,3)| |subaut(1,req2,4)|))
(assert (or (not |live(2)|) |subaut(2,req1,4)| |subaut(2,enter2,5)|))
(assert (or (not |live(3)|) |subaut(3,exit1,0)| |subaut(3,req2,6)|))
(assert (or (not |live(4)|) |subaut(4,enter1,8)| |subaut(4,enter2,9)|))
(assert (or (not |live(5)|) |subaut(5,req1,7)| |subaut(5,exit2,0)|))
(assert (or (not |live(6)|) |subaut(6,exit1,2)|))
(assert (or (not |live(7)|) |subaut(7,exit2,1)|))
(assert (or (not |live(8)|) |subaut(8,exit1,13)|))
(assert (or (not |live(9)|) |subaut(9,exit2,12)|))
(assert (or (not |live(10)|) |subaut(10,enter1,8)|))
(assert (or (not |live(11)|) |subaut(11,enter2,9)|))
(assert (or (not |live(12)|) |subaut(12,enter1,3)| |subaut(12,req2,10)|))
(assert (or (not |live(13)|) |subaut(13,req1,11)| |subaut(13,enter2,5)|))
(assert (or (not |subaut_action(enter1)|) |subaut(1,enter1,3)| |subaut(4,enter1,8)| |subaut(10,enter1,8)| |subaut(12,enter1,3)|))
(assert (or (not |subaut_action(enter2)|) |subaut(2,enter2,5)| |subaut(4,enter2,9)| |subaut(11,enter2,9)| |subaut(13,enter2,5)|))
(assert (or (not |subaut_action(exit1)|) |subaut(3,exit1,0)| |subaut(6,exit1,2)| |subaut(8,exit1,13)|))
(assert (or (not |subaut_action(exit2)|) |subaut(5,exit2,0)| |subaut(7,exit2,1)| |subaut(9,exit2,12)|))
(assert (or (not |outgoing(1,enter1)|) |subaut(1,enter1,3)|))
(assert (or (not |outgoing(1,req2)|) |subaut(1,req2,4)|))
(assert (or (not |outgoing(2,req1)|) |subaut(2,req1,4)|))
(assert (or (not |outgoing(2,enter2)|) |subaut(2,enter2,5)|))
(assert (or (not |outgoing(3,exit1)|) |subaut(3,exit1,0)|))
(assert (or (not |outgoing(3,req2)|) |subaut(3,req2,6)|))
(assert (or (not |outgoing(4,enter1)|) |subaut(4,enter1,8)|))
(assert (or (not |outgoing(4,enter2)|) |subaut(4,enter2,9)|))
(assert (or (not |outgoing(5,req1)|) |subaut(5,req1,7)|))
(assert (or (not |outgoing(5,exit2)|) |subaut(5,exit2,0)|))
(assert (or (not |outgoing(6,exit1)|) |subaut(6,exit1,2)|))
(assert (or (not |outgoing(7,exit2)|) |subaut(7,exit2,1)|))
(assert (or (not |outgoing(8,exit1)|) |subaut(8,exit1,13)|))
(assert (or (not |outgoing(9,exit2)|) |subaut(9,exit2,12)|))
(assert (or (not |outgoing(10,enter1)|) |subaut(10,enter1,8)|))
(assert (or (not |outgoing(11,enter2)|) |subaut(11,enter2,9)|))
(assert (or (not |outgoing(12,enter1)|) |subaut(12,enter1,3)|))
(assert (or (not |outgoing(12,req2)|) |subaut(12,req2,10)|))
(assert (or (not |outgoing(13,req1)|) |subaut(13,req1,11)|))
(assert (or (not |outgoing(13,enter2)|) |subaut(13,enter2,5)|))
(assert (or (not |317|) |required(ezcsp__geq(ezcsp__pl(lr119,-1),lr125))|))
(assert (or (not |317|) |313|))
(assert (or (not |required(ezcsp__geq(ezcsp__pl(lr119,-1),lr125))|) (not |313|) |317|))
(assert (or (not |320|) |required(ezcsp__geq(ezcsp__pl(lr120,-1),lr124))|))
(assert (or (not |320|) |315|))
(assert (or (not |required(ezcsp__geq(ezcsp__pl(lr120,-1),lr124))|) (not |315|) |320|))
(assert (or (not |324|) |subaut(8,exit1,13)|))
(assert (or (not |324|) |reach(8)|))
(assert (or (not |subaut(8,exit1,13)|) (not |reach(8)|) |324|))
(assert (or (not |323|) |required(ezcsp__geq(ezcsp__pl(lr122,-1),lr119))|))
(assert (or (not |323|) |324|))
(assert (or (not |required(ezcsp__geq(ezcsp__pl(lr122,-1),lr119))|) (not |324|) |323|))
(assert (or (not |328|) |subaut(9,exit2,12)|))
(assert (or (not |328|) |reach(9)|))
(assert (or (not |subaut(9,exit2,12)|) (not |reach(9)|) |328|))
(assert (or (not |327|) |required(ezcsp__geq(ezcsp__pl(lr123,-1),lr120))|))
(assert (or (not |327|) |328|))
(assert (or (not |required(ezcsp__geq(ezcsp__pl(lr123,-1),lr120))|) (not |328|) |327|))
(assert (or (not |332|) |subaut(13,req1,11)|))
(assert (or (not |332|) |reach(13)|))
(assert (or (not |subaut(13,req1,11)|) (not |reach(13)|) |332|))
(assert (or (not |331|) |required(ezcsp__geq(ezcsp__pl(lr124,-1),lr122))|))
(assert (or (not |331|) |332|))
(assert (or (not |required(ezcsp__geq(ezcsp__pl(lr124,-1),lr122))|) (not |332|) |331|))
(assert (or (not |336|) |subaut(12,req2,10)|))
(assert (or (not |336|) |reach(12)|))
(assert (or (not |subaut(12,req2,10)|) (not |reach(12)|) |336|))
(assert (or (not |335|) |required(ezcsp__geq(ezcsp__pl(lr125,-1),lr123))|))
(assert (or (not |335|) |336|))
(assert (or (not |required(ezcsp__geq(ezcsp__pl(lr125,-1),lr123))|) (not |336|) |335|))
(assert |dom(req1,1)|)
(assert |dom(req1,3)|)
(assert |dom(enter1,1)|)
(assert |dom(enter1,4)|)
(assert |dom(exit1,1)|)
(assert |dom(exit1,3)|)
(assert |dom(req2,2)|)
(assert |dom(req2,4)|)
(assert |dom(enter2,2)|)
(assert |dom(enter2,3)|)
(assert |dom(exit2,2)|)
(assert |dom(exit2,4)|)
(assert |indep(req1,req2)|)
(assert |indep(req2,req1)|)
(assert |indep(req1,exit2)|)
(assert |indep(exit2,req1)|)
(assert |indep(enter1,enter2)|)
(assert |indep(enter2,enter1)|)
(assert |indep(exit1,req2)|)
(assert |indep(req2,exit1)|)
(assert |indep(exit1,exit2)|)
(assert |indep(exit2,exit1)|)
(assert |initialstate(0)|)
(assert |trans(0,req1,1)|)
(assert |subaut(0,req1,1)|)
(assert |trans(0,req2,2)|)
(assert |subaut(0,req2,2)|)
(assert |trans(1,enter1,3)|)
(assert |trans(1,req2,4)|)
(assert |trans(2,req1,4)|)
(assert |trans(2,enter2,5)|)
(assert |trans(3,exit1,0)|)
(assert |trans(3,req2,6)|)
(assert |trans(4,enter1,8)|)
(assert |trans(4,enter2,9)|)
(assert |trans(5,req1,7)|)
(assert |trans(5,exit2,0)|)
(assert |trans(6,exit1,2)|)
(assert |trans(7,exit2,1)|)
(assert |trans(8,exit1,13)|)
(assert |trans(9,exit2,12)|)
(assert |trans(10,enter1,8)|)
(assert |trans(11,enter2,9)|)
(assert |trans(12,enter1,3)|)
(assert |trans(12,req2,10)|)
(assert |trans(13,req1,11)|)
(assert |trans(13,enter2,5)|)
(assert |action(req1)|)
(assert |action(req2)|)
(assert |action(enter1)|)
(assert |action(enter2)|)
(assert |action(exit1)|)
(assert |action(exit2)|)
(assert |process(1)|)
(assert |process(3)|)
(assert |process(4)|)
(assert |process(2)|)
(assert |state(0)|)
(assert |state(1)|)
(assert |state(2)|)
(assert |state(3)|)
(assert |state(4)|)
(assert |state(5)|)
(assert |state(6)|)
(assert |state(7)|)
(assert |state(8)|)
(assert |state(9)|)
(assert |state(10)|)
(assert |state(11)|)
(assert |state(12)|)
(assert |state(13)|)
(assert |reach(0)|)
(assert |reach(1)|)
(assert |reach(2)|)
(assert (not |126|))
(assert |live(0)|)
(assert |live(1)|)
(assert |live(2)|)
(assert |subaut_action(req1)|)
(assert |subaut_action(req2)|)
(assert |subaut_action(enter1)|)
(assert |subaut_action(enter2)|)
(assert |subaut_action(exit1)|)
(assert |subaut_action(exit2)|)
(assert |equivalent(1,0,0)|)
(assert |equivalent(1,1,1)|)
(assert |equivalent(1,2,2)|)
(assert |equivalent(1,3,3)|)
(assert |equivalent(1,4,4)|)
(assert |equivalent(1,5,5)|)
(assert |equivalent(1,6,6)|)
(assert |equivalent(1,7,7)|)
(assert |equivalent(1,8,8)|)
(assert |equivalent(1,9,9)|)
(assert |equivalent(1,10,10)|)
(assert |equivalent(1,11,11)|)
(assert |equivalent(1,12,12)|)
(assert |equivalent(1,13,13)|)
(assert |equivalent(3,0,0)|)
(assert |equivalent(3,1,1)|)
(assert |equivalent(3,2,2)|)
(assert |equivalent(3,3,3)|)
(assert |equivalent(3,4,4)|)
(assert |equivalent(3,5,5)|)
(assert |equivalent(3,6,6)|)
(assert |equivalent(3,7,7)|)
(assert |equivalent(3,8,8)|)
(assert |equivalent(3,9,9)|)
(assert |equivalent(3,10,10)|)
(assert |equivalent(3,11,11)|)
(assert |equivalent(3,12,12)|)
(assert |equivalent(3,13,13)|)
(assert |equivalent(4,0,0)|)
(assert |equivalent(4,1,1)|)
(assert |equivalent(4,2,2)|)
(assert |equivalent(4,3,3)|)
(assert |equivalent(4,4,4)|)
(assert |equivalent(4,5,5)|)
(assert |equivalent(4,6,6)|)
(assert |equivalent(4,7,7)|)
(assert |equivalent(4,8,8)|)
(assert |equivalent(4,9,9)|)
(assert |equivalent(4,10,10)|)
(assert |equivalent(4,11,11)|)
(assert |equivalent(4,12,12)|)
(assert |equivalent(4,13,13)|)
(assert |equivalent(2,0,0)|)
(assert |equivalent(2,1,1)|)
(assert |equivalent(2,2,2)|)
(assert |equivalent(2,3,3)|)
(assert |equivalent(2,4,4)|)
(assert |equivalent(2,5,5)|)
(assert |equivalent(2,6,6)|)
(assert |equivalent(2,7,7)|)
(assert |equivalent(2,8,8)|)
(assert |equivalent(2,9,9)|)
(assert |equivalent(2,10,10)|)
(assert |equivalent(2,11,11)|)
(assert |equivalent(2,12,12)|)
(assert |equivalent(2,13,13)|)
(assert |equivalent_dom(req1,0,0)|)
(assert |equivalent_dom(req1,1,1)|)
(assert |equivalent_dom(req1,2,2)|)
(assert |equivalent_dom(req1,3,3)|)
(assert |equivalent_dom(req1,4,4)|)
(assert |equivalent_dom(req1,5,5)|)
(assert |equivalent_dom(req1,6,6)|)
(assert |equivalent_dom(req1,7,7)|)
(assert |equivalent_dom(req1,8,8)|)
(assert |equivalent_dom(req1,9,9)|)
(assert |equivalent_dom(req1,10,10)|)
(assert |equivalent_dom(req1,11,11)|)
(assert |equivalent_dom(req1,12,12)|)
(assert |equivalent_dom(req1,13,13)|)
(assert |equivalent_dom(req2,0,0)|)
(assert |equivalent_dom(req2,1,1)|)
(assert |equivalent_dom(req2,2,2)|)
(assert |equivalent_dom(req2,3,3)|)
(assert |equivalent_dom(req2,4,4)|)
(assert |equivalent_dom(req2,5,5)|)
(assert |equivalent_dom(req2,6,6)|)
(assert |equivalent_dom(req2,7,7)|)
(assert |equivalent_dom(req2,8,8)|)
(assert |equivalent_dom(req2,9,9)|)
(assert |equivalent_dom(req2,10,10)|)
(assert |equivalent_dom(req2,11,11)|)
(assert |equivalent_dom(req2,12,12)|)
(assert |equivalent_dom(req2,13,13)|)
(assert |equivalent_dom(enter1,0,0)|)
(assert |equivalent_dom(enter1,1,1)|)
(assert |equivalent_dom(enter1,2,2)|)
(assert |equivalent_dom(enter1,3,3)|)
(assert |equivalent_dom(enter1,4,4)|)
(assert |equivalent_dom(enter1,5,5)|)
(assert |equivalent_dom(enter1,6,6)|)
(assert |equivalent_dom(enter1,7,7)|)
(assert |equivalent_dom(enter1,8,8)|)
(assert |equivalent_dom(enter1,9,9)|)
(assert |equivalent_dom(enter1,10,10)|)
(assert |equivalent_dom(enter1,11,11)|)
(assert |equivalent_dom(enter1,12,12)|)
(assert |equivalent_dom(enter1,13,13)|)
(assert |equivalent_dom(enter2,0,0)|)
(assert |equivalent_dom(enter2,1,1)|)
(assert |equivalent_dom(enter2,2,2)|)
(assert |equivalent_dom(enter2,3,3)|)
(assert |equivalent_dom(enter2,4,4)|)
(assert |equivalent_dom(enter2,5,5)|)
(assert |equivalent_dom(enter2,6,6)|)
(assert |equivalent_dom(enter2,7,7)|)
(assert |equivalent_dom(enter2,8,8)|)
(assert |equivalent_dom(enter2,9,9)|)
(assert |equivalent_dom(enter2,10,10)|)
(assert |equivalent_dom(enter2,11,11)|)
(assert |equivalent_dom(enter2,12,12)|)
(assert |equivalent_dom(enter2,13,13)|)
(assert |equivalent_dom(exit1,0,0)|)
(assert |equivalent_dom(exit1,1,1)|)
(assert |equivalent_dom(exit1,2,2)|)
(assert |equivalent_dom(exit1,3,3)|)
(assert |equivalent_dom(exit1,4,4)|)
(assert |equivalent_dom(exit1,5,5)|)
(assert |equivalent_dom(exit1,6,6)|)
(assert |equivalent_dom(exit1,7,7)|)
(assert |equivalent_dom(exit1,8,8)|)
(assert |equivalent_dom(exit1,9,9)|)
(assert |equivalent_dom(exit1,10,10)|)
(assert |equivalent_dom(exit1,11,11)|)
(assert |equivalent_dom(exit1,12,12)|)
(assert |equivalent_dom(exit1,13,13)|)
(assert |equivalent_dom(exit2,0,0)|)
(assert |equivalent_dom(exit2,1,1)|)
(assert |equivalent_dom(exit2,2,2)|)
(assert |equivalent_dom(exit2,3,3)|)
(assert |equivalent_dom(exit2,4,4)|)
(assert |equivalent_dom(exit2,5,5)|)
(assert |equivalent_dom(exit2,6,6)|)
(assert |equivalent_dom(exit2,7,7)|)
(assert |equivalent_dom(exit2,8,8)|)
(assert |equivalent_dom(exit2,9,9)|)
(assert |equivalent_dom(exit2,10,10)|)
(assert |equivalent_dom(exit2,11,11)|)
(assert |equivalent_dom(exit2,12,12)|)
(assert |equivalent_dom(exit2,13,13)|)
(assert |outgoing(0,req1)|)
(assert |outgoing(0,req2)|)
(assert |309|)
(declare-fun |lr124| () Int)
(assert (<= 1 |lr124|))
(assert (>= 6 |lr124|))

(declare-fun |lr123| () Int)
(assert (<= 1 |lr123|))
(assert (>= 6 |lr123|))

(declare-fun |lr120| () Int)
(assert (<= 1 |lr120|))
(assert (>= 6 |lr120|))

(declare-fun |lr125| () Int)
(assert (<= 1 |lr125|))
(assert (>= 6 |lr125|))

(declare-fun |lr122| () Int)
(assert (<= 1 |lr122|))
(assert (>= 6 |lr122|))

(declare-fun |lr119| () Int)
(assert (<= 1 |lr119|))
(assert (>= 6 |lr119|))

(assert (=> |required(ezcsp__geq(ezcsp__pl(lr120,-1),lr124))| (>=(+ |lr120|  (- 1)) |lr124| )))
(assert (=> |required(ezcsp__geq(ezcsp__pl(lr124,-1),lr122))| (>=(+ |lr124|  (- 1)) |lr122| )))
(assert (=> |required(ezcsp__geq(ezcsp__pl(lr123,-1),lr120))| (>=(+ |lr123|  (- 1)) |lr120| )))
(assert (=> |required(ezcsp__geq(ezcsp__pl(lr122,-1),lr119))| (>=(+ |lr122|  (- 1)) |lr119| )))
(assert (=> |required(ezcsp__geq(ezcsp__pl(lr119,-1),lr125))| (>=(+ |lr119|  (- 1)) |lr125| )))
(assert (=> |required(ezcsp__geq(ezcsp__pl(lr125,-1),lr123))| (>=(+ |lr125|  (- 1)) |lr123| )))

; Check satisfiability
(check-sat)
(exit)
